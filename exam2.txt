N * N 크기를 가지는 2 차원 공간에, K 대의 드론이 있다.

2 차원 공간은 장애물 또는 빈 공간으로 구성되어 있다.

장애물은 회색으로, 빈 공간은 흰색 또는 빨간색으로 칠해진 셀들로 구성된다.

 

각각의 드론은 1 ~ K 까지 고유 번호와 각자의 이동 방향을 가지고 있다.



                       [Fig. 1]

 

매 턴 마다 K 대의 드론을 모두 이동시키되, 1 번 드론 부터 K 번 드론 순으로 이동시킨다.

이동 시 규칙은 다음과 같다.

 

1. 드론은 매 턴 마다, 주어진 방향으로 한칸 씩 이동한다.

2. 드론은 장애물을 만나거나, 지도 가장자리에 도달한 경우, 방향을 반대로 전환하여 이동한다.

[Fig. 2] 는 장애물 또는 지도 가장자리에 인접한 1, 2, 3 번 드론이 

순차적으로 이동하는 모습을 보여준다.

 

                                                            [Fig. 2] 

 

3. 만약, 드론이 아래 [Fig. 3] 과 같이 이동이 불가능 한 경우, 방향만 반대로 전환한다.

 

                                                           [Fig. 3] 

 

4. 드론이 이동한 자리에 다른 드론이 있을 경우, 이동한 자리에 있는 드론 위로 올라간다. 

[Fig. 4] 는 4 번 드론이 이동한 자리에 3 번 드론이 있어, 4 번 드론이 3 번 드론 위로 올라간 모습을 보여준다.

 

                                                           [Fig. 4] 

 

5. 이동하는 드론 위에 다른 드론들이 있을 경우, 이동하는 드론 위에 있는 드론들은 모두 함께 움직인다. 

함께 이동한 드론들은, 각자의 이동 방향을 그대로 유지한다.

 

함께 이동하는 드론들의 배치 순서는, 도착 지점의 셀의 색상에 따라 다음과 같다.

 

1) 드론이 도착한 지점이 흰색으로 칠해진 셀 인 경우, 

함께 이동한 드론들이 기존 순서 그대로 배치된다.

[Fig. 5] 는 3 번 드론이 이동 시, 4 번 드론이 함께 움직여 배치된 모습을 보여준다.

 

                                                      [Fig. 5] 

 

2) 드론이 도착한 지점이 빨간색으로 칠해진 셀 인 경우, 

함께 이동한 드론들이 기존 순서와 반대로 배치된다. ( [Fig. 6-1] , [Fig. 6-2] 참고 )



                    [Fig. 6-1]                                                       [Fig. 6-2]           

 

입력으로 N * N 크기를 가지는 2 차원 공간의 정보와

드론의 초기 위치 및 이동 방향이 주어졌을 때,

4 대 이상의 드론이 동시에 같은 셀에 있는 경우가 최초로 발생하는 턴을 출력하는 프로그램을 작성하라.

( 단, 4 대 이상의 드론이 동시에 같은 셀에 있는 경우가 1,000 턴 동안 발생하지 않을 경우, 정답으로 -1 을 출력한다. )

 

[예시]

N = 6, K = 6 이고, 2 차원 공간의 정보와 드론의 초기 위치 및 이동 방향이 [Fig. 7] 과 같이 주어졌을 때,

 

 

                         [Fig. 7]

 

turn = 1 에서 1~6 번 드론이 순서대로 움직인 결과는 [Fig. 8] 과 같다.

 

                         [Fig. 8]

 

[Fig. 9-1] 은 turn = 2 에서, 1 번 드론이 움직인 후 상태를 보여준다.



                        [Fig. 9-1]

 

이후, 2 번 드론의 이동 결과는 [Fig. 9-2] 와 같다.

6 번 드론이 2 번 드론 위에 놓여 있으므로, 2 번 드론이 움직일 때, 6 번 드론도 따라서 움직인다.

단, 두 대의 드론이 도착한 지점의 좌표 셀 (2, 4) 는 색상이 빨간색으로 칠해진 곳이므로

1 번 드론 위에, 6 번 드론이 배치되고, 6 번 드론 위에 2 번 드론이 배치된다.

 



                        [Fig. 9-2] 

 

[Fig. 9-3] 은 3 번 드론이 움직인 결과이다.

4 번 드론이 3 번 드론 위에 놓여 있으므로, 3 번 드론이 움직일 때, 4 번 드론이 따라서 움직인다.

 

 

                         [Fig. 9-3]

 

[Fig. 9-4] 는 4 번 드론이 이동한 모습을 보여준다.

 

 

                        [Fig. 9-4]

 

[Fig. 9-5] 는 5 번 드론이 움직인 결과이다.

 

 

                         [Fig. 9-5]

(2, 4) 에서 4 대의 드론이 모여있다. 이때 turn = 2 이므로,

예시에 대한 정답으로 2 를 출력한다.

 

[제약사항] 

1. 시간제한 : 최대 50 개 테스트 케이스를 모두 통과하는 데 C / C++ / Java 3 초, Python 10 초

2. N 은 6 이상 12 이하의 정수이다. ( 6 ≤ N ≤ 12 )

3. K 는 6 이상 10 이하의 정수이다. ( 6 ≤ K ≤ 10 )

4. 입력으로 두 대 이상의 드론의 위치가 중복으로 주어지는 경우는 없다.

5. 입력으로 장애물이 있는 위치에 드론의 위치가 주어지는 경우는 없다.

6. 4 대 이상의 드론이 동시에 같은 셀에 있는 경우가 1,000 턴 동안 발생하지 않을 경우, 정답으로 -1 을 출력한다.

 

[입력]

입력의 맨 첫 줄에는 총 테스트 케이스의 개수 T 가 주어지고, 그 다음 줄 부터 T 개의 테스트 케이스가 주어진다.

각 테스트 케이스의 첫 번째 줄에는 2차원 공간의 크기 N 과, 드론의 대수인 K 가 주어진다.

그 다음 N 개 줄에 걸쳐 2차원 공간의 정보가 주어진다.

0 은 흰색으로 칠해진 공간, 1 은 빨간색으로 칠해진 공간을 의미한다.

2 는 장애물을 나타낸다.

그 다음 K 개의 줄에 1 번 부터 순서대로 드론의 초기 위치 ( x, y ) 와 초기 이동 방향이 주어진다.

드론의 초기 이동 방향은 아래 표의 정수 값으로 주어진다.


→
 
0
 

↓
 
1
 

←
 
2
 

↑
 
3
 

 

 

[출력]

테스트 케이스 개수만큼 T 개의 줄에 각각의 테스트 케이스에 대한 답을 출력한다.

각 줄은 “#t”로 시작하고 공백을 하나 둔 다음 정답을 출력한다. (t는 1부터 시작하는 테스트 케이스의 번호이다)

 

출력해야 할 정답은, 4 대 이상의 드론이 동시에 같은 셀에 있는 경우가 최초로 발생하는 턴이다.

( 단, 4 대 이상의 드론이 동시에 같은 셀에 있는 경우가 1,000 턴 동안 발생하지 않을 경우, 정답으로 -1 을 출력한다. )

 




[입출력 예]



       
 
입력 예
 

10

6 6 

2 0 2 2 2 2

2 0 0 0 2 2

2 2 0 0 0 2

1 0 0 0 0 0

0 0 1 0 2 2

2 2 0 0 2 2

2 2 1

2 4 0

3 1 1

4 2 2

0 4 0

3 5 1

…
 
// 총 테스트 케이스 개수 T = 10

// 첫 번째 테스트 케이스, N = 6, K = 6, 본문 예시

 

 

 

 

 

 

// 1 번 드론의 초기 위치 ( 2, 2 ), 초기 이동 방향 ↓

// 2 번 드론의 초기 위치 ( 2, 4 ), 초기 이동 방향 →

// 3 번 드론의 초기 위치 ( 3, 1 ), 초기 이동 방향 ↓

// 4 번 드론의 초기 위치 ( 4, 2 ), 초기 이동 방향 ←

// 5 번 드론의 초기 위치 ( 0, 4 ), 초기 이동 방향 →

// 6 번 드론의 초기 위치 ( 3, 5 ), 초기 이동 방향 ↓

// 나머지는 sample_input.txt 참조
 




 



      
 
예제 입력에 대한 정답 출력
 

#1 2

#2 19

#3 -1

#4 10

#5 25

#6 180

#7 -1

#8 50

#9 114

#10 657
 





